/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AdminLab;

import Admin_Conexion.Conexion;
import Admin_DAO.AsignaturaDAO;
import Admin_DAO.DocenteDAO;
import Admin_DAO.HorariosDAO;
import Admin_DAO.HorasDAO;
import Admin_DAO.LaboratorioDAO;
import Admin_DAO.UtilizanDAO;
import Admin_Funciones.Funciones;
import Admin_VO.AsignaturaVO;
import Admin_VO.DocenteVO;
import Admin_VO.HorariosVO;
import Admin_VO.HorasVO;
import Admin_VO.LaboratorioVO;
import Admin_VO.ResultadoVO;
import Admin_VO.UtilizanVO;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SMK GAMING
 */
public class Ingreso extends javax.swing.JFrame {

    DefaultComboBoxModel cbm_rutD = new DefaultComboBoxModel();
    DefaultComboBoxModel cbm_laboratorio = new DefaultComboBoxModel();
    DefaultComboBoxModel cbm_hora = new DefaultComboBoxModel();
    DefaultComboBoxModel cbm_horario = new DefaultComboBoxModel();
    DefaultComboBoxModel cbm_as = new DefaultComboBoxModel();
    DefaultTableModel tb_disponible = new DefaultTableModel();
    ArrayList<String> docen = new ArrayList();
    ArrayList<Integer> asig = new ArrayList();
    ArrayList<String> lab = new ArrayList();
    ArrayList<Integer> hora = new ArrayList();
    ArrayList<Integer> horario = new ArrayList();
    Conexion bd = new Conexion();
    Connection cc = bd.conexion();
    Connection cd = bd.conexion();
    Connection ce = bd.conexion();
    Connection cf = bd.conexion();
    Connection cg = bd.conexion();
    Connection ch = bd.conexion();

    UtilizanDAO daoUt = new UtilizanDAO(cg);

    public Ingreso() {
        initComponents();
        this.setTitle("Admin Lab");
        this.setLocationRelativeTo(Ingreso.this);
        Image ico =Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Img/Admin Lab.png"));
        this.setIconImage(ico);
        tb_disponible.addColumn("idUtilizan");
        tb_disponible.addColumn("Rut");
        tb_disponible.addColumn("nomLab");
        tb_disponible.addColumn("Materia");
        tb_disponible.addColumn("Fecha");
        tb_disponible.addColumn("Horario");
        tb_disponible.addColumn("Hora");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btg_Horario = new javax.swing.ButtonGroup();
        lb_titulo = new javax.swing.JLabel();
        btn_reserva = new javax.swing.JButton();
        btn_consulta = new javax.swing.JButton();
        btn_salir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbm_rut = new javax.swing.JComboBox<>();
        cbm_lab = new javax.swing.JComboBox<>();
        dateFec = new com.toedter.calendar.JDateChooser();
        lb_horas = new javax.swing.JLabel();
        cbm_horas = new javax.swing.JComboBox<>();
        lb_asig = new javax.swing.JLabel();
        cbm_asig = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_utilizan = new javax.swing.JTable();
        lb_reservas = new javax.swing.JLabel();
        cb_horario = new javax.swing.JComboBox<>();
        btn_eliminar = new javax.swing.JButton();
        lb_idEliminar = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lb_titulo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lb_titulo.setText("Reserva de Horas Laboratorio");

        btn_reserva.setText("Reservar");
        btn_reserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reservaActionPerformed(evt);
            }
        });

        btn_consulta.setText("Consultar");
        btn_consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_consultaActionPerformed(evt);
            }
        });

        btn_salir.setText("Salir");
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });

        jLabel1.setText("Rut Docente");

        jLabel2.setText("Horario");

        jLabel3.setText("Fecha");

        jLabel4.setText("Laboratorio");

        cbm_rut.setModel(cbm_rutD);

        cbm_lab.setModel(cbm_laboratorio);

        dateFec.setDateFormatString("yyyy-MM-dd");
        dateFec.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        lb_horas.setText("Horas");

        cbm_horas.setModel(cbm_hora);

        lb_asig.setText("Asignatura");

        cbm_asig.setModel(cbm_as);

        tb_utilizan.setModel(tb_disponible);
        jScrollPane1.setViewportView(tb_utilizan);

        lb_reservas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lb_reservas.setText("Reservas");

        cb_horario.setModel(cbm_horario);
        cb_horario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_horarioItemStateChanged(evt);
            }
        });
        cb_horario.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cb_horarioInputMethodTextChanged(evt);
            }
        });

        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        lb_idEliminar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lb_idEliminar.setText("Ingrese ID a Eliminar");

        txt_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_idKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(lb_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lb_horas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbm_rut, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(cbm_horas, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cb_horario, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(dateFec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lb_asig, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(cbm_asig, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(cbm_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(btn_reserva, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_salir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 26, 26))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(492, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lb_idEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_id))
                        .addGap(28, 28, 28)
                        .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lb_reservas, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(286, 286, 286))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(lb_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbm_rut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbm_lab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_asig, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbm_asig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dateFec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cb_horario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 22, Short.MAX_VALUE)))
                                .addComponent(lb_horas, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(cbm_horas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(58, 58, 58)
                        .addComponent(btn_reserva, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(123, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lb_reservas, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lb_idEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(btn_salir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btn_salirActionPerformed

    private void btn_reservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reservaActionPerformed

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        UtilizanDAO dao = new UtilizanDAO(cc);
        UtilizanVO vo = new UtilizanVO();
        String rut, selecrut, laboratorio, selecthora;
        Date fechaIn;
        String[] espliter ;
        String[] esrut ;

        int horario,asignatura , hora;
        if(cbm_rut.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(rootPane, "Seleccione Rut");
        }else
        if(cbm_lab.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(rootPane, "Seleccione Laboratorio");
        }else
        if(cbm_asig.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(rootPane, "Seleccione Asignatura");
        }else
        if (dateFec.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Ingrese Fecha correcta");
        }else
        if(cb_horario.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(rootPane, "Seleccione Horario");
        }else
        if(cbm_horas.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(rootPane, "Seleccione Hora");
        } else {

            int año = dateFec.getCalendar().get(Calendar.YEAR);
            int mes = dateFec.getCalendar().get(Calendar.MONTH) + 1;
            int dia = dateFec.getCalendar().get(Calendar.DAY_OF_MONTH);
            String fecha = año + "-" + mes + "-" + dia;
            String nok = "Errores encontrados: ";
            Boolean ok = true;

            if (ok) {
                selecrut = (String) cbm_rut.getSelectedItem();
                esrut = selecrut.split(":");
                rut = esrut[0];
                
                laboratorio = (String) cbm_lab.getSelectedItem();
                asignatura =cbm_asig.getSelectedIndex();
                selecthora = (String) cbm_horas.getSelectedItem();
                espliter = selecthora.split("-");
                hora = Integer.parseInt(espliter[0]);
                
                horario = cb_horario.getSelectedIndex();
                obtenerHoras(horario);
                fechaIn = Date.valueOf(fecha);
                vo.setdRut(rut);
                vo.setNomLab(laboratorio);
                vo.setIdAsignatura(asignatura);
                vo.setFecha(fechaIn);
                vo.setIdHorario(horario);
                vo.setIdHora(hora);
                if (dao.repetirReserva(vo) != 0) {
                    JOptionPane.showMessageDialog(rootPane, "Verificar que fecha no se encuentre reservada");
                } else if (dao.insertarReserva(vo) > 0) {

                    JOptionPane.showMessageDialog(rootPane, "Se realizó la reserva correctamente");
                    obtenerHorarios();
                    obtenerAsignatura();
                    obtenerLab();
                    obtenerRut();
                    dateFec.setDate(null);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al reservar");
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, nok);
            }
        }

    }//GEN-LAST:event_btn_reservaActionPerformed


    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        /* 
        //inicializa los datos de los combobox vacios para cuando se cambie de pantalla
        //no sobreescribir los datos obtenidos de la BD
        cbm_rut.removeAllItems();
        cbm_rutD.addElement("Seleccione...");
        cbm_asig.removeAllItems();
        cbm_as.addElement("Seleccione...");
        //cbm_horas.removeAllItems();
        
        cbm_lab.removeAllItems();
        cbm_laboratorio.addElement("Seleccione...");
        cb_horario.removeAllItems();
        cbm_horario.addElement("Seleccione...");
        
        //Obtiene los datos del combobox desde la BD
        ArrayList lista_doc = new ArrayList();
        DocenteDAO dao = new DocenteDAO(cc);
        lista_doc = dao.getDocente();
        String rut;
        for (int i = 0; i < lista_doc.size(); i++) {
            DocenteVO dovo = (DocenteVO) lista_doc.get(i);
            docen.add(dovo.getRut());
            rut = dovo.getRut();
            cbm_rutD.addElement(rut);
        }

        ArrayList lista_a = new ArrayList();
        AsignaturaDAO daoA = new AsignaturaDAO(cd);
        lista_a = daoA.getAsignatura();
        String materia;
        for (int i = 0; i < lista_a.size(); i++) {
            AsignaturaVO dovo = (AsignaturaVO) lista_a.get(i);
            asig.add(dovo.getIdAsignatura());
            materia = dovo.getIdAsignatura();
            cbm_as.addElement(materia);
        }

        ArrayList lista_lab = new ArrayList();
        LaboratorioDAO daoLab = new LaboratorioDAO(ce);
        lista_lab = daoLab.getLaboratorios();
        String nom;
        for (int i = 0; i < lista_lab.size(); i++) {
            LaboratorioVO Lovo = (LaboratorioVO) lista_lab.get(i);
            lab.add(Lovo.getNomLab());
            nom = Lovo.getNomLab();
            cbm_laboratorio.addElement(nom);
        }

        ArrayList lista_hrario = new ArrayList();
        HorariosDAO daoHor = new HorariosDAO(ch);
        lista_hrario = daoHor.getHorarios();
        String horari;
        for (int i = 0; i < lista_hrario.size(); i++) {
            HorariosVO hravo = (HorariosVO) lista_hrario.get(i);
            horario.add(hravo.getIdHorario());
            horari = hravo.getDesHorario();
            cbm_horario.addElement(horari);
        }
        
        obtenerHoras();
               
        ArrayList lista_hrs = new ArrayList();
        HorasDAO daoHr = new HorasDAO(cf);
        lista_hrs = daoHr.getHoras();
        String hrs;
        for (int i = 0; i < lista_hrs.size(); i++) {
            HorasVO hrvo = (HorasVO) lista_hrs.get(i);
            hora.add(hrvo.getIdHoras());
            hrs = hrvo.getHora();
            cbm_hora.addElement(hrs);
        }*/


    }//GEN-LAST:event_formWindowActivated

    public void obtenerHoras(int horario) {
        cbm_hora.removeAllElements();
        cbm_hora.addElement("Seleccione...");
        ArrayList lista_hrs = new ArrayList();
        HorasDAO daoHr = new HorasDAO(cf);
        lista_hrs = daoHr.getHoras();
        String hrs;
        for (int i = 0; i < lista_hrs.size(); i++) {
            HorasVO hrvo = (HorasVO) lista_hrs.get(i);
            hrs = hrvo.getHora();
            if (horario == 1) {
                if (hrvo.getIdHoras() <= 6) {
                    hora.add(hrvo.getIdHoras());
                    cbm_hora.addElement(hrvo.getIdHoras() + "- " + hrs);
                }
            } else if (horario == 2) {
                if (hrvo.getIdHoras() >= 7 && hrvo.getIdHoras() <= 11) {
                    hora.add(hrvo.getIdHoras());
                    cbm_hora.addElement(hrvo.getIdHoras() + "- " + hrs);
                }
            } else if (horario == 3) {
                if (hrvo.getIdHoras() >= 12 && hrvo.getIdHoras() <= 16) {
                    hora.add(hrvo.getIdHoras());
                    cbm_hora.addElement(hrvo.getIdHoras() + "- " + hrs);
                }
            } else {
                //colocar validacion
            }
        }
    }

    public void obtenerHorarios() {
        cbm_horario.removeAllElements();
        cbm_horario.addElement("Seleccione...");
        ArrayList lista_hrario = new ArrayList();
        HorariosDAO daoHor = new HorariosDAO(ch);
        lista_hrario = daoHor.getHorarios();
        String horari;
        for (int i = 0; i < lista_hrario.size(); i++) {
            HorariosVO hravo = (HorariosVO) lista_hrario.get(i);
            horario.add(hravo.getIdHorario());
            horari = hravo.getDesHorario();
            cbm_horario.addElement(horari);
        }
    }

    public void obtenerRut() {
        cbm_rutD.removeAllElements();
        cbm_rutD.addElement("Seleccione...");
        ArrayList lista_doc = new ArrayList();
        DocenteDAO dao = new DocenteDAO(cc);
        lista_doc = dao.getDocente();
        String rut;
        String nom,app;
        for (int i = 0; i < lista_doc.size(); i++) {
            DocenteVO dovo = (DocenteVO) lista_doc.get(i);
            docen.add(dovo.getRut());
            docen.add(dovo.getNombre());
            docen.add(dovo.getApellido());
            rut = dovo.getRut();
            nom = dovo.getNombre();
            app = dovo.getApellido();
            cbm_rutD.addElement(rut+": "+nom+" "+app);
        }
    }

    public void obtenerLab() {
        cbm_laboratorio.removeAllElements();
        cbm_laboratorio.addElement("Seleccione...");
        ArrayList lista_lab = new ArrayList();
        LaboratorioDAO daoLab = new LaboratorioDAO(ce);
        lista_lab = daoLab.getLaboratorios();
        String nom;
        for (int i = 0; i < lista_lab.size(); i++) {
            LaboratorioVO Lovo = (LaboratorioVO) lista_lab.get(i);
            lab.add(Lovo.getNomLab());
            nom = Lovo.getNomLab();
            cbm_laboratorio.addElement(nom);
        }
    }

    public void obtenerAsignatura() {
        cbm_as.removeAllElements();
        cbm_as.addElement("Seleccione...");
        ArrayList lista_a = new ArrayList();
        AsignaturaDAO daoA = new AsignaturaDAO(cd);
        lista_a = daoA.getAsignatura();
        String materia;
        for (int i = 0; i < lista_a.size(); i++) {
            AsignaturaVO dovo = (AsignaturaVO) lista_a.get(i);
            asig.add(dovo.getIdAsignatura());
            materia = dovo.getMateria();
            cbm_as.addElement(materia);
        }
    }


    private void btn_consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_consultaActionPerformed

        tb_disponible.setNumRows(0);
        ArrayList dat_Lista = new ArrayList();
        dat_Lista = daoUt.getReservas();

        if (!dat_Lista.isEmpty()) {
            Object fila[] = new Object[7];
            for (int i = 0; i < dat_Lista.size(); i++) {
                ResultadoVO prod = (ResultadoVO) dat_Lista.get(i);
                fila[0] = prod.getIdUtilizan();
                fila[1] = prod.getdRut();
                fila[2] = prod.getNomLab();
                fila[3] = prod.getMateria();
                fila[4] = prod.getFecha();
                fila[5] = prod.getDesHorario();
                fila[6] = prod.getHora();
                tb_disponible.addRow(fila);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "No existen Reservas ingresadas");
        }
    }//GEN-LAST:event_btn_consultaActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        Funciones f = new Funciones();
        String id;
        int idd;
        id = txt_id.getText();
        
        if (id.length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Ingrese el ID de una reserva");
        } else {
            idd = Integer.parseInt(id);
            daoUt.eliminaReserva(idd);
            txt_id.setText("");

            tb_disponible.setNumRows(0);
            ArrayList dat_Lista = new ArrayList();
            dat_Lista = daoUt.getReservas();
            if (!dat_Lista.isEmpty()) {
                Object fila[] = new Object[7];
                for (int i = 0; i < dat_Lista.size(); i++) {
                    ResultadoVO prod = (ResultadoVO) dat_Lista.get(i);
                    fila[0] = prod.getIdUtilizan();
                    fila[1] = prod.getdRut();
                    fila[2] = prod.getNomLab();
                    fila[3] = prod.getMateria();
                    fila[4] = prod.getFecha();
                    fila[5] = prod.getDesHorario();
                    fila[6] = prod.getHora();
                    tb_disponible.addRow(fila);
                }
            }
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void txt_idKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idKeyTyped
        char c = evt.getKeyChar();

        if (c < '0' || c > '9') {
            evt.consume();
        }

    }//GEN-LAST:event_txt_idKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        obtenerHorarios();
        obtenerAsignatura();
        obtenerLab();
        obtenerRut();
        //inicializa los datos de los combobox vacios para cuando se cambie de pantalla
        //no sobreescribir los datos obtenidos de la BD
        //cbm_rut.removeAllItems();
        //cbm_rutD.addElement("Seleccione...");
        //cbm_asig.removeAllItems();
        //cbm_as.addElement("Seleccione...");
        //cbm_horas.removeAllItems();

        //cbm_lab.removeAllItems();
        //cbm_laboratorio.addElement("Seleccione...");
        //cb_horario.removeAllItems();
        //cbm_horario.addElement("Seleccione...");
        /*
        //Obtiene los datos del combobox desde la BD
        ArrayList lista_doc = new ArrayList();
        DocenteDAO dao = new DocenteDAO(cc);
        lista_doc = dao.getDocente();
        String rut;
        for (int i = 0; i < lista_doc.size(); i++) {
            DocenteVO dovo = (DocenteVO) lista_doc.get(i);
            docen.add(dovo.getRut());
            rut = dovo.getRut();
            cbm_rutD.addElement(rut);
        }

        ArrayList lista_a = new ArrayList();
        AsignaturaDAO daoA = new AsignaturaDAO(cd);
        lista_a = daoA.getAsignatura();
        String materia;
        for (int i = 0; i < lista_a.size(); i++) {
            AsignaturaVO dovo = (AsignaturaVO) lista_a.get(i);
            asig.add(dovo.getIdAsignatura());
            materia = dovo.getIdAsignatura();
            cbm_as.addElement(materia);
        }

        ArrayList lista_lab = new ArrayList();
        LaboratorioDAO daoLab = new LaboratorioDAO(ce);
        lista_lab = daoLab.getLaboratorios();
        String nom;
        for (int i = 0; i < lista_lab.size(); i++) {
            LaboratorioVO Lovo = (LaboratorioVO) lista_lab.get(i);
            lab.add(Lovo.getNomLab());
            nom = Lovo.getNomLab();
            cbm_laboratorio.addElement(nom);
        }

        ArrayList lista_hrario = new ArrayList();
        HorariosDAO daoHor = new HorariosDAO(ch);
        lista_hrario = daoHor.getHorarios();
        String horari;
        for (int i = 0; i < lista_hrario.size(); i++) {
            HorariosVO hravo = (HorariosVO) lista_hrario.get(i);
            horario.add(hravo.getIdHorario());
            horari = hravo.getDesHorario();
            cbm_horario.addElement(horari);
        }
         */
 /*        
        ArrayList lista_hrs = new ArrayList();
        HorasDAO daoHr = new HorasDAO(cf);
        lista_hrs = daoHr.getHoras();
        String hrs;
        for (int i = 0; i < lista_hrs.size(); i++) {
            HorasVO hrvo = (HorasVO) lista_hrs.get(i);
            hora.add(hrvo.getIdHoras());
            hrs = hrvo.getHora();
            cbm_hora.addElement(hrs);
        }*/

    }//GEN-LAST:event_formWindowOpened

    private void cb_horarioInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cb_horarioInputMethodTextChanged
        //int horario;
        //horario = cb_horario.getSelectedIndex();
        //obtenerHoras(horario);

    }//GEN-LAST:event_cb_horarioInputMethodTextChanged

    private void cb_horarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_horarioItemStateChanged
        int horario;
        horario = cb_horario.getSelectedIndex();
        obtenerHoras(horario);
    }//GEN-LAST:event_cb_horarioItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ingreso().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btg_Horario;
    private javax.swing.JButton btn_consulta;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_reserva;
    private javax.swing.JButton btn_salir;
    private javax.swing.JComboBox<String> cb_horario;
    private javax.swing.JComboBox<String> cbm_asig;
    private javax.swing.JComboBox<String> cbm_horas;
    private javax.swing.JComboBox<String> cbm_lab;
    private javax.swing.JComboBox<String> cbm_rut;
    private com.toedter.calendar.JDateChooser dateFec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_asig;
    private javax.swing.JLabel lb_horas;
    private javax.swing.JLabel lb_idEliminar;
    private javax.swing.JLabel lb_reservas;
    private javax.swing.JLabel lb_titulo;
    private javax.swing.JTable tb_utilizan;
    private javax.swing.JTextField txt_id;
    // End of variables declaration//GEN-END:variables
}
